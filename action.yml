name: 'Deps Sync Action'
description: 'Manages a deps branch and synchronizes with main branch'
inputs:
  deps-branch:
    description: 'Name of the deps branch'
    required: false
    default: 'deps'
  main-branch:
    description: 'Name of the main branch'
    required: false
    default: 'main'
  github-token:
    description: 'GitHub token'
    required: false
    default: ${{ github.token }}
runs:
  using: "composite"
  steps:
    - id: branches
      name: Set branch variables
      shell: bash
      run: |
        echo "deps_branch=${{ inputs.deps-branch }}" >> $GITHUB_ENV
        echo "main_branch=${{ inputs.main-branch }}" >> $GITHUB_ENV
        cp $GITHUB_ENV $GITHUB_OUTPUT

    - name: Create ${{ steps.branches.outputs.deps_branch }} if needed
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { deps_branch, main_branch } = process.env;
          try {
            await github.rest.repos.getBranch({
              ...context.repo,
              branch: deps_branch,
            });
            console.log(`Branch ${deps_branch} exists.`);
          } catch (error) {
            if (error.status !== 404) {
              throw error
            }
            console.log(`Branch ${deps_branch} does not exist. Creating it from head of ${main_branch}...`);
            const {data: mainBranch} = await github.rest.repos.getBranch({
              ...context.repo,
              branch: main_branch,
            });
            await github.rest.git.createRef({
              ...context.repo,
              ref: `refs/heads/${deps_branch}`,
              sha: mainBranch.commit.sha,
            });
            console.log(`Branch ${deps_branch} created from head of ${main_branch}: ${mainBranch.commit.sha}.`);
          }

    - name: Checkout ${{ steps.branches.outputs.deps_branch }}
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.branches.outputs.deps_branch }}
        fetch-depth: 0
        token: ${{ inputs.github-token }}

    - name: Configure git
      shell: bash
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Merge in latest ${{ steps.branches.outputs.main_branch }}
      shell: bash
      run: |
        git fetch
        git merge --strategy-option theirs origin/${{ env.main_branch }}

    - name: Install JSON5
      shell: bash
      run: |
        mkdir -p /tmp/json5
        cd /tmp/json5
        npm install json5 --no-save

    - name: Update Renovate config
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs')
          const path = require('path')
          const JSON5 = require('/tmp/json5/node_modules/json5')
          const assert = require('assert')

          const {deps_branch} = process.env

          const possibleConfigs = [
            'renovate.json',
            'renovate.json5',
            '.renovaterc',
            '.renovaterc.json',
            '.renovaterc.json5',
            '.github/renovate.json',
            '.github/renovate.json5',
            '.gitlab/renovate.json',
            '.gitlab/renovate.json5',
            'package.json',
          ]

          const {config, configPath} = possibleConfigs.flatMap(configPath => {
            if (!fs.existsSync(configPath)) return []
            const content = fs.readFileSync(configPath, 'utf8')
            const parsed = JSON5.parse(content)
            const config = configPath === 'package.json' ? parsed.renovate : parsed
            if (!config) return []

            return [{config, configPath}]
          }).find(Boolean) || {configPath: possibleConfigs[0], config: {}}

          const updatedConfig = {
            // recommended defaults, but overrideable
            '$schema': 'https://docs.renovatebot.com/renovate-schema.json',
            extends: ['config:recommended'],

            // https://github.com/renovatebot/renovate/discussions/30727
            // disabled until renovate can add an escaping option: https://github.com/renovatebot/renovate/discussions/31230
            // commitBody: '{{#if logJSON.hasReleaseNotes}}{{#each logJSON.versions as |release|}}{{# if release.releaseNotes}}##### [v{{{release.version}}}]({{{release.releaseNotes.url}}})\n\n{{{release.releaseNotes.body}}}{{/if}}{{/each}}{{/if}}',

            ...config,

            // required config - the workflow needs these values set up this way
            baseBranches: [deps_branch],
            automerge: true,
            automergeType: 'branch',
            // https://github.com/renovatebot/renovate/discussions/30727
            fetchChangeLogs: 'branch',
          }

          try {
            assert.deepStrictEqual(config, updatedConfig)
            console.log(`Config at ${configPath} is already up to date`)
            return
          } catch {
            // config was updated, continue
          }

          if (configPath === 'package.json') {
            const pkg = JSON.parse(fs.readFileSync(configPath, 'utf8'))
            pkg.renovate = updatedConfig
            fs.writeFileSync(configPath, JSON.stringify(pkg, null, 2) + '\n')
          } else {
            const {stringify} = configPath.endsWith('.json5') ? JSON5 : JSON
            fs.writeFileSync(configPath, stringify(updatedConfig, null, 2) + '\n')
          }

          console.log(`Renovate config updated successfully at ${configPath}`)

    - name: Commit renovate config
      id: commit_renovate_config
      shell: bash
      run: |
        git status
        GIT_STATUS=$(git status --porcelain)
        if [ -z "$GIT_STATUS" ]; then
          echo "no working changes, nothing to commit"
        else
          echo "changes=yes" >> $GITHUB_OUTPUT
          git add .
          git commit -m 'chore: update renovate config' --no-verify
        fi

    - name: Check for a package.json
      id: check_package_json
      shell: bash
      run: |
        if [ -f package.json ]; then
          echo "exists=yes" >> $GITHUB_OUTPUT
        else
          echo "exists=no" >> $GITHUB_OUTPUT
        fi

    - name: Update lockfile
      if: steps.check_package_json.outputs.exists == 'yes'
      shell: bash
      run: |
        corepack enable
        pnpm install --no-frozen-lockfile

    - name: Commit lockfile changes
      if: steps.check_package_json.outputs.exists == 'yes'
      id: commit_lockfile
      shell: bash
      run: |
        git status
        GIT_STATUS=$(git status --porcelain)
        if [ -z "$GIT_STATUS" ]; then
          echo "no working changes, nothing to commit"
        else
          echo "changes=yes" >> $GITHUB_OUTPUT
          git add .
          git commit -m 'chore: changes after pnpm install' --no-verify
        fi

    - name: Push changes
      id: push_changes
      shell: bash
      run: |
        is_ahead=$(git status | grep 'Your branch is ahead' || echo '')
        if [ -z "$is_ahead" ]; then
          git status
          echo "no changes to push"
        else
          echo "ahead=yes" >> $GITHUB_OUTPUT
          git push
        fi

    - name: Check if ${{ steps.branches.outputs.deps_branch }} branch is ahead of ${{ steps.branches.outputs.main_branch }}
      id: deps_diff
      shell: bash
      run: |
        git checkout ${{ env.main_branch }}
        git pull
        diff=$(git diff ${{ env.deps_branch }})
        if [ -z "$diff" ]; then
          echo "no diff between ${{ env.main_branch }} and ${{ env.deps_branch }}"
          echo "status=clean" >> $GITHUB_OUTPUT
        else
          echo "diff between ${{ env.main_branch }} and ${{ env.deps_branch }}:"
          echo "$diff"
          echo "status=dirty" >> $GITHUB_OUTPUT
        fi

    - name: Reset deps branch
      if: steps.deps_diff.outputs.status == 'clean'
      shell: bash
      run: |
        git checkout ${{ env.deps_branch }}
        git diff ${{ env.main_branch }} --exit-code
        git fetch origin
        git reset --hard origin/${{ env.main_branch }}
        git push --force-with-lease origin ${{ env.deps_branch }}

    - name: Create pull request
      if: steps.deps_diff.outputs.status == 'dirty'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const iterator = github.paginate.iterator(github.rest.pulls.list, {
            ...context.repo,
            state: 'open',
          })
          const {deps_branch: head, main_branch: base} = process.env

          const childProcess = require('child_process')
          const updateCommits = childProcess.execSync('git --no-pager log --oneline --no-merges main..deps').toString().trim().split('\n')
          let updatedDeps = updateCommits
            .map(line => line.match(/update dependency (.+) to/))
            .filter(Boolean)
            .map(match => match[1])
          updatedDeps = [...new Set(updatedDeps)]

          const maxListed = 3
          const depsSummary = updatedDeps
              .slice(0, maxListed)
              .map((dep, i, {length}) => {
                if (i === maxListed - 1 && updatedDeps.length > maxListed) return `and ${updatedDeps.length - (maxListed - 1)} more`
                if (i > 0 && i === length - 1) return `and ${dep}`
                return dep
              })
              .join(', ').replace(', and', ' and')
          const prTitle = ['renovate: update', depsSummary, 'ðŸŒ²'].filter(Boolean).join(' ')

          console.log({prTitle, updateCommits})
          const prBody = [
            'This PR was automatically created by the ${{ github.workflow }} workflow.',
            '',
            'Review the dependency updates made by @renovate-bot, and merge as needed.',
            '',
            '### Updates included:',
            '',
            updateCommits.map(commit => `- ${commit}`).join('\n'),
          ].join('\n')

          for await (const {data: pulls} of iterator) {
            const existing = pulls.find(p => p.head.ref === head && p.base.ref === base)
            if (existing) {
              console.log(`Pull request into ${base} from ${head} already exists: ${existing.title} ${existing.html_url}`)

              if (existing.title === prTitle && existing.body === prBody) {
                console.log('PR is up to date')
                return
              } else {
                console.log('PR is out of date, updating...')
                await github.rest.pulls.update({
                  ...context.repo,
                  pull_number: existing.number,
                  title: prTitle,
                  body: prBody,
                })
              }
              return
            }
          }

          await github.rest.pulls.create({
            ...context.repo,
            head,
            base,
            title: prTitle,
            body: prBody,
          })
